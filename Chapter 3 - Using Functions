
## Chapter 3.1 -  Python Functions - Notes

## What are Functions?
- Functions are reusable blocks of code that perform a specific task.
- They help break a program into smaller, manageable parts.
- Using functions improves readability, maintainability, and code reusability.

**## Defining a Function**
- Use the `def` keyword to define a function.
- The function may take parameters and return a value.


### **Syntax:**
def function_name(parameters):
    """Optional docstring"""
    # Function body
    return value  # Optional

Example:
def greet():
    print("Hello, welcome to Python!")

greet()
Output:
Hello, welcome to Python!



**## Function Parameters and Arguments**
- **Parameter**: A variable listed inside the parentheses in the function definition.
- **Argument**: The actual value passed to the function when calling it.

### **Example:**

def greet(name):                  # 'name' is a parameter
    print("Hello,", name)

greet("Alice")                    # "Alice" is an argument

**Output:**
Hello, Alice





## Return Values
- Functions can return a value using the `return` statement.
- The returned value can be stored in a variable or used directly.

### Example:
def square(num):
    return num * num

result = square(5)
print(result)

Output:
25



**## Default Parameter Values**
- If no argument is provided, a default value is used.

### **Example:**
def greet(name="User"):
    print("Hello,", name)

greet()                  # Uses default value
greet("Bob")

**Output:**
Hello, User
Hello, Bob


**## Multiple Parameters**
- A function can accept multiple parameters.

## Example:
def add(a, b):
    return a + b

print(add(3, 7))
Output:
10






